1.  Find how many bikes the shop owns by category.Display the category name and the number of bikes the shop owns in each category (call this column number_of_bikes ). Show only the categories 
where the number of bikes is greater than 2.

Query :- 
      select category, count(1) as number_of_bikes 
      from bike
      group by category
      having count(1) > 2;

2.The shop owner needs a list of customer names with the total number of memberships purchased by each.For each customer, display the customer's name and the count of 
memberships purchased (call this column membership_count ). Sort the results by membership_count , starting with the customer who has purchased 
the highest number of memberships. Keep in mind that some customers may not have purchased any memberships yet. In such a situation, display 0 for the membership_count .

Query :-       
      select c.name, count(m.id) as membership_count 
      from membership m
      right join customer c on c.id=m.customer_id
      group by c.name
      order by count(1) desc;

3. The shop owner is working on a special offer for the winter months. Can you help her prepare a list of new rental prices? For each bike, display its ID, category, old price per hour (call this column old_price_per_hour ), discounted price per hour (call it 
new_price_per_hour ), old price per day (call it old_price_per_day ), and discounted price per day (call it new_price_per_day ).
Electric bikes should have a 10% discount for hourly rentals and a 20% discount for daily rentals. Mountain bikes should have a 20% discount for hourly rentals and a 50% discount for daily rentals. All other bikes should 
have a 50% discount for all types of rentals.Round the new prices to 2 decimal digits.

Query :-
      select id, category
, price_per_hour as old_price_per_hour
, case when category = 'electric' then round(price_per_hour - (price_per_hour*0.1) ,2)
	   when category = 'mountain bike' then round(price_per_hour - (price_per_hour*0.2) ,2)
       else round(price_per_hour - (price_per_hour*0.5) ,2)
  end as new_price_per_hour
, price_per_day as old_price_per_day
, case when category = 'electric' then round(price_per_day - (price_per_day*0.2) ,2)
	   when category = 'mountain bike' then round(price_per_day - (price_per_day*0.5) ,2)
       else round(price_per_day - (price_per_day*0.5) ,2)
  end as new_price_per_day
from bike;

4. The shop owner is looking for counts of the rented bikes and of the available bikes in each category. Display the number of available bikes (call this column available_bikes_count ) and the number of rented bikes (call this column 
   rented_bikes_count ) by bike category.

   Query:- 
    select category
, count(case when status ='available' then 1 end) as available_bikes_count
, count(case when status ='rented' then 1 end) as rented_bikes_count
from bike
group by category;

5.The shop owner is preparing a sales report. She needs to know the total revenue from rentals by month, the total by year, and the all-time across all the years.
  Display the total revenue from rentals for each month, the total for each year, and the total across all the years. Do not take memberships into 
  account. There should be 3 columns: year, month , and revenue.

   Query:- 
      select extract(year from start_timestamp) as year
, extract(month from start_timestamp) as month
, sum(total_paid) as revenue
from rental
group by extract(year from start_timestamp), extract(month from start_timestamp)
union all
select extract(year from start_timestamp) as year
, null as month, sum(total_paid) as revenue
from rental
group by extract(year from start_timestamp)
union all
select null as year, null as month, sum(total_paid) as revenue
from rental
order by year, month;

6.The shop owner has asked you to get the total revenue from memberships for each combination of year, month, and membership type.Display the year, the month, the name of the membership type (call this column 
  membership_type_name ), and the total revenue (call this column total_revenue ) for every combination of year, month, and membership type. 
  Sort the results by year, month, and name of membership type.

      Query :- 
      select extract(year from start_date) as year
, extract(month from start_date) as month
, mt.name as membership_type_name
, sum(total_paid) as total_revenue
from membership m
join membership_type mt on m.membership_type_id = mt.id
group by year, month, mt.name
order by year, month, mt.name

7.Next, the shop owner would like data about memberships purchased in 2023, with subtotals and grand totals for all the different combinations of membership types and months.
 Display the total revenue from memberships purchased in 2023 for each combination of month and membership type. Generate subtotals and 
grand totals for all possible combinations.  There should be 3 columns: membership_type_name , month , and total_revenue .
 Sort the results by membership type name alphabetically and then 
chronologically by month.

      Query:- 
      select mt.name as membership_type_name
, extract(month from start_date) as month
, sum(total_paid) as total_revenue
from membership m
join membership_type mt on m.membership_type_id = mt.id
where extract(year from start_date) = 2023
group by CUBE(membership_type_name, month)
order by membership_type_name, month;

